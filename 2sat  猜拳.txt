#include<cstdio>
#include<iostream>
#include<cmath>
#include<stack>
#include<algorithm>
#include<string>
#include<cstring>
#include<vector>
#include<queue>
#include <functional>
#include<map>
#include<iomanip>
#include<set>
#include <utility>
#include<queue>
#include<bitset>
#define ll long long
#define maxn 105
const ll mod = 1000000007;
const double pi = acos(-1);
const double eps = 1e-9;
const int inf = 1e9;
using namespace std;
#define N 40080 /*顶点总数，包括拆点以后的*/  
#define inf 0x4f4f4f4f  
vector<int>g[N];
int n, m;
int id[N], pre[N], low[N], s[N], stop, cnt, scnt, pa[N], pb[N][2];

bool flag = true;
void tarjan(int v) { /*求强连通分量，vertex: 0 ~ n-1*/
	int t, minc = low[v] = pre[v] = cnt++;
	s[stop++] = v;
	for (int i = 0; i < g[v].size(); i++) {
		if (-1 == pre[g[v][i]]) tarjan(g[v][i]);
		if (low[g[v][i]] < minc) minc = low[g[v][i]];
	}
	if (minc < low[v]) { low[v] = minc; return; }
	do { t = s[--stop]; id[t] = scnt; low[t] = N; } while (t != v);
	++scnt; /*联通分量个数*/
}
int _2sat() {
	stop = cnt = scnt = 0;
	memset(pre, -1, sizeof(pre));
	for (int i = 0; i <n + n; ++i) if (-1 == pre[i]) tarjan(i);
	for (int i = 0; i < n; i++) if (id[i] == id[i + n]) return 0;
	return 1;
}
void build(int k)
{
	for (int i = 0; i <= 2 * n; i++)g[i].clear();
	for (int i = 0; i<n; i++)
	{
		scanf("%d", &pa[i]);
		if (pa[i] == 1)
			pb[i][0] = 1, pb[i][1] = 2;
		else if (pa[i] == 2)
			pb[i][0] = 2, pb[i][1] = 3;
		else if (pa[i] == 3)
			pb[i][0] = 1, pb[i][1] = 3;
	}

	for (int i = 0; i<k; i++)
	{
		int u, v, fl;
		scanf("%d%d%d", &u, &v, &fl);
		u--, v--;
		if (fl == 1)
		{
			if (pb[u][0] == pb[v][0])
			{
				g[u].push_back(v + n);
				g[v].push_back(u + n);
			}
			if (pb[u][0] == pb[v][1])
			{
				g[u].push_back(v);
				g[v + n].push_back(u + n);
			}
			if (pb[u][1] == pb[v][0])
			{
				g[u + n].push_back(v + n);
				g[v].push_back(u);
			}
			if (pb[u][1] == pb[v][1])
			{
				g[u + n].push_back(v);
				g[v + n].push_back(u);
			}
		}
		else
		{
			if (pb[u][0] != pb[v][0])
			{
				g[u].push_back(v + n);
				g[v].push_back(u + n);
			}
			if (pb[u][0] != pb[v][1])
			{
				g[u].push_back(v);
				g[v + n].push_back(u + n);
			}
			if (pb[u][1] != pb[v][0])
			{
				g[u + n].push_back(v + n);
				g[v].push_back(u);
			}
			if (pb[u][1] != pb[v][1])
			{
				g[u + n].push_back(v);
				g[v + n].push_back(u);
			}
		}
	}
}
int main()
{
	int k, tt = 1, tcase;
	scanf("%d", &tcase);
	while (tcase--)
	{
		scanf("%d%d", &n, &k);
		flag = 1;
		build(k);
		int ans = _2sat();
		if (ans) printf("Case #%d: yes\n", tt++);
		else   printf("Case #%d: no\n", tt++);
	}
	//system("pause");
	return 0;
}