#include<cstdio>
#include<iostream>
#include<cmath>
#include<stack>
#include<algorithm>
#include<string>
#include<cstring>
#include<vector>
#include<queue>
#include <functional>
#include<map>
#include<iomanip>
#include<set>
#include <utility>
#include<queue>
#include<bitset>
#define ll long long
#define maxn 100005
const ll mod = 1000000007;
const double pi = acos(-1);
const double eps = 1e-9;
const int inf = 1e9;
using namespace std;
const int MAXN = 510;//最大点数 
const int MAXM = 26000;//最大边数 
int F[MAXN];//并查集使用 
struct Edge
{
	int u, v, w;
}edge[MAXM];//存储边的信息，包括起点/终点/权值 
int tol;//边数，加边前赋值为0
void addedge(int u, int v, int w)
{
	edge[tol].u = u;
	edge[tol].v = v;
	edge[tol++].w = w;
}
bool cmp(Edge a, Edge b)
{//排序函数，讲边按照权值从小到大排序  
	return a.w<b.w;
}
int find(int x)
{
	if (F[x] == -1)return x;
	else return F[x] = find(F[x]);
}
int Kruskal(int n)//传入点数，返回最小生成树的权值，如果不连通返回-1 
{
	memset(F, -1, sizeof(F));
	sort(edge, edge + tol, cmp);
	int cnt = 0;//计算加入的边数  
	int ans = 0;
	for (int i = 0; i<tol; i++)
	{
		int u = edge[i].u;
		int v = edge[i].v;
		int w = edge[i].w;
		int t1 = find(u);
		int t2 = find(v);
		if (t1 != t2)
		{
			ans += w;
			F[t1] = t2;
			cnt++;
		}
		if (cnt == n - 1)break;
	}
	if (cnt<n - 1)return -1;//不连通  
	else return ans;
}
int main()
{
	int t, u, v, w,n,m,k,c;
	scanf("%d", &t);
	while (t--)
	{  
		tol = 0;
		scanf("%d%d%d", &n, &m, &k);
		for(int i=0;i<m;i++)
		{
			scanf("%d%d%d", &u, &v, &w);
			addedge(u, v, w);
		}
		for(int i=0;i<k;i++)
		{
			scanf("%d",&c);
			scanf("%d",&u);
			for(int j=1;j<c;j++)
			{
				scanf("%d", &v);
				addedge(u, v, 0);
			}
		}
		printf("%d\n",Kruskal(n));
	}
	//system("pause");
	return 0;
}