技能点1.0版本
#include<cstdio>
#include<iostream>
#include<cmath>
#include<stack>
#include<algorithm>
#include<string>
#include<cstring>
#include<vector>
#include<queue>
#include <functional>
#include<map>
#include<iomanip>
#include<set>
#include <utility>
#include<queue>
#include<bitset>
#include<ctime>
#define ll long long
#define maxn 50005
#define lson l , m , rt << 1
#define rson m + 1 , r , rt << 1 | 1
const int mod = 1000000007;
const double pi = acos(-1);
const double eps = 1e-9;
const int inf = 1000000000;
using namespace std;
int tot, head[maxn], top[maxn], fa[maxn], deep[maxn], num[maxn], p[maxn], fp[maxn], son[maxn], pos;
int va[maxn],tree[maxn<<2];
struct edge
{
	int to, next;
}e[maxn * 2];
struct ed
{
	int u, v, w;
}a[maxn];
int n;
void addedge(int u, int v)
{
	e[tot].to = v;
	e[tot].next = head[u];
	head[u] = tot++;
}
void dfs(int u, int pre, int d)
{
	deep[u] = d;
	fa[u] = pre;
	num[u] = 1;
	for (int i = head[u]; i != -1; i = e[i].next)
	{
		int v = e[i].to;
		if (v != pre)
		{
			dfs(v, u, d + 1);
			num[u] += num[v];
			if (son[u] == -1 || num[v] > num[u])son[u] = v;
		}
	}
}
void dfs2(int u, int sp)
{
	top[u] = sp;
	if (son[u] != -1)
	{
		p[u] = pos++;
		fp[p[u]] = u;
		dfs2(son[u], sp);
	}
	else
	{
		p[u] = pos++;
		fp[p[u]] = u;
		return;
	}
	for (int i = head[u]; i != -1; i = e[i].next)
	{
		int v = e[i].to;
		if (v != fa[u] && v != son[u])dfs2(v, v);
	}
}
void pushup(int rt)
{
	tree[rt] = max(tree[rt << 1], tree[rt << 1 | 1]);
}
void build(int l,int r,int rt)
{
	if (l == r)
	{
		tree[rt] = va[l]; return;
	}
	int m = (l + r) >> 1;
	build(lson);
	build(rson);
	pushup(rt);
}
void update(int p,int c,int l,int r,int rt)
{
	if (l == r) { tree[rt] = c; return; }
	int m = (l + r) >> 1;
	if (p <= m)update(p, c, lson);
	else update(p, c, rson);
	pushup(rt);
}
int query(int L,int R,int l,int r,int rt)
{
	if (L <= l&&r <= R)return tree[rt];
	int m = (l + r) >> 1;
	int res = 0;
	if (m >= L)res = max(res, query(L, R, lson));
	if (R > m)res = max(res, query(L, R, rson));
	return res;
}
int getans(int u,int v)
{
	int f1 = top[u], f2 = top[v];
	int temp = 0;
	while (f1!=f2)
	{
		if (deep[f1] < deep[f2])swap(f1, f2),swap(u, v);
		temp = max(temp, query(p[f1], p[u], 1, n, 1));
		u = fa[f1]; f1 = top[u];
	}
	if (u == v)return temp;
	if (deep[u] >deep[v])swap(u, v);
	return max(temp, query(p[son[u]], p[v], 1, n, 1));
}
int main()
{
	int t;
	char op[10];
	scanf("%d", &t);
	int u, v;
	while (t--)
	{
		tot = 0;
		memset(head, -1, sizeof head);
		pos = 1;
		memset(son, -1, sizeof son);
		scanf("%d", &n);
		for (int i = 0; i < n - 1; ++i)
		{
			scanf("%d%d%d", &a[i].u, &a[i].v, &a[i].w);
			addedge(a[i].u, a[i].v);
			addedge(a[i].v, a[i].u);
		}
		dfs(1, 0, 0);
		dfs2(1, 1);
		for (int i = 0; i < n - 1; ++i)
		{
			if (deep[a[i].u] < deep[a[i].v])swap(a[i].u, a[i].v);
			va[p[a[i].u]] = a[i].w;
		}
		build(1, n, 1);
		while (~scanf("%s",op))
		{
			if (op[0] == 'D')break;
			scanf("%d%d", &u, &v);
			if (op[0] == 'Q')printf("%d\n", getans(u, v));
			else update(p[a[u - 1].u], v, 1, n, 1);
		}
	}
	return 0;

}