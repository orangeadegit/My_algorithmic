#include<cstdio>
#include<iostream>
#include<cmath>
#include<stack>
#include<algorithm>
#include<string>
#include<cstring>
#include<vector>
#include<queue>
#include <functional>
#include<map>
#include<iomanip>
#include<set>
#include <utility>
#define ll long long
#define maxn 128
const ll mod = 1000000007;
const double pi = acos(-1);
const double eps = 1e-9;
const int inf = 1e9;
using namespace std;
const int MAXN = 55;
const int INF = 0xfffff0;
int Equ, Var;
int A[MAXN][MAXN], B[MAXN][MAXN];
int X[MAXN];
bool FreeX[MAXN];
int FreeNum;
int GCD(int a, int b)
{
	if (b == 0)
		return a;
	return GCD(b, a%b);
}

int LCM(int a, int b)
{
	return a / GCD(a, b) * b;
}

int Gauss()
{
	int i, j, k;
	int MaxRow;
	int col = 0;
	int Lcm;
	int ta, tb;
	int temp;
	int FreeXNum;
	int FreeIndex;

	for (i = 0; i < Var; ++i)
	{
		X[i] = 0;
		FreeX[i] = true;
	}

	for (k = 0; k < Equ && col < Var; ++k, ++col)
	{
		MaxRow = k;
		for (i = k + 1; i < Equ; ++i)
		{
			if (abs(A[i][col]) > abs(A[MaxRow][col]))
				MaxRow = i;
		}
		if (MaxRow != k)
		{
			for (j = k; j < Var + 1; ++j)
				swap(A[k][j], A[MaxRow][j]);
		}
		if (A[k][col] == 0)
		{
			k--;
			continue;
		}
		for (i = k + 1; i < Equ; ++i)
		{
			if (A[i][col])
			{
				Lcm = LCM(abs(A[i][col]), abs(A[k][col]));
				ta = Lcm / abs(A[i][col]);
				tb = Lcm / abs(A[k][col]);
				if (A[i][col] * A[k][col] < 0)
					tb = -tb;
				for (j = col; j < Var + 1; ++j)
				{
					A[i][j] = (A[i][j] * ta % 2 - A[k][j] * tb % 2 + 2) % 2;
				}
			}
		}
	}

	for (i = k; i < Equ; ++i)
	{
		if (A[i][col])
			return -1;
	}

	if (k < Var)
		return Var - k;

	return 0;
}
int T, k, cas, d, ans;
int main()
{
	scanf("%d", &T);
	cas = 0;
	while (T--)
	{
		scanf("%d%d", &Equ, &Var);
		memset(A, 0, sizeof(A));
		memset(B, 0, sizeof(B));
		memset(X, 0, sizeof(X));
		for (int i = 0; i<Var; i++)
		{
			scanf("%d", &k);
			for (int j = 0; j<k; j++)
			{
				scanf("%d", &d);
				B[d - 1][i] = 1;
			}
		}
		printf("Case %d:\n", ++cas);
		scanf("%d", &k);
		while (k--)
		{
			memcpy(A, B, sizeof(B));
			for (int i = 0; i < Equ; i++)scanf("%d", &A[i][Var]);
			ans = Gauss();
			if (ans == -1)printf("0\n");
			else printf("%lld\n", 1ll << ans);
		}

	}
	//system("pause");
	return 0;
}
