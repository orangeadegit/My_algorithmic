#include<cstdio>
#include<iostream>
#include<cmath>
#include<stack>
#include<algorithm>
#include<string>
#include<cstring>
#include<vector>
#include<queue>
#include <functional>
#include<map>
#include<iomanip>
#include<set>
#include <utility>
#include<queue>
#include<bitset>
#include <numeric>
#define ll long long
#define maxn 2001
#define lson l , m , rt << 1
#define rson m + 1 , r , rt << 1 | 1
const int mod = 142857;
const double pi = acos(-1);
const double eps = 0.1;
const int inf = 100000000;
using namespace std;
typedef vector<int> VI;
typedef vector<VI> VVI;
const int INF = 1000000000;
struct MaxFlow
{
	int N;
	VVI cap, flow;
	VI dad, Q;

	MaxFlow(int N) :
		N(N), cap(N, VI(N)), flow(N, VI(N)), dad(N), Q(N) {}

	void AddEdge(int from, int to, int cap) {
		this->cap[from][to] += cap;
	}

	int BlockingFlow(int s, int t) {
		fill(dad.begin(), dad.end(), -1);
		dad[s] = -2;

		int head = 0, tail = 0;
		Q[tail++] = s;
		while (head < tail) {
			int x = Q[head++];
			for (int i = 0; i < N; i++) {
				if (dad[i] == -1 && cap[x][i] - flow[x][i] > 0) {
					dad[i] = x;
					Q[tail++] = i;
				}
			}
		}

		if (dad[t] == -1) return 0;

		int totflow = 0;
		for (int i = 0; i < N; i++) {
			if (dad[i] == -1) continue;
			int amt = cap[i][t] - flow[i][t];
			for (int j = i; amt && j != s; j = dad[j])
				amt = min(amt, cap[dad[j]][j] - flow[dad[j]][j]);
			if (amt == 0) continue;
			flow[i][t] += amt;
			flow[t][i] -= amt;
			for (int j = i; j != s; j = dad[j]) {
				flow[dad[j]][j] += amt;
				flow[j][dad[j]] -= amt;
			}
			totflow += amt;
		}

		return totflow;
	}

	int GetMaxFlow(int source, int sink) {
		int totflow = 0;
		while (int flow = BlockingFlow(source, sink))
			totflow += flow;
		return totflow;
	}
};
map<pair<int, int>, bool>ed;
map<int, int>N;
int main() 
{
	int n, m, s, t,u,v,c;
	N.clear(); ed.clear();
	scanf("%d%d%d%d", &n, &m, &s, &t);
	MaxFlow mf(n);
	for (int i = 0; i < m; i++)
	{
		scanf("%d%d%d", &u, &v, &c);
		mf.AddEdge(u, v, c);
	}
	int ans=mf.GetMaxFlow(s,t);
	int ann = 0,ane=0;
	for (int i = 0; i < n; i++)for (int j= 0; j < n; j++)
	{
		if (mf.flow[i][j] > 0)
		{
			ane++;
		}
	}
	printf("%d %d %d\n", n, ans, ane);
	for (int i = 0; i < n; i++)for (int j = 0; j < n; j++)
	{
		if (mf.flow[i][j] > 0)printf("%d %d %d\n", i,j, mf.flow[i][j]);
	}
	return 0;
}
