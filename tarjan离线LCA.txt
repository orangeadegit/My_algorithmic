#include<cstdio>
#include<iostream>
#include<cmath>
#include<stack>
#include<algorithm>
#include<string>
#include<cstring>
#include<vector>
#include<queue>
#include <functional>
#include<map>
#include<iomanip>
#include<set>
#include <utility>
#include<queue>
#include<bitset>
#define ll long long
#define maxn 100001
#define lson l , m , rt << 1
#define rson m + 1 , r , rt << 1 | 1
const int mod = 1000000007;
const double pi = acos(-1);
const double eps = 1e-9;
const int inf = 1000000000;
using namespace std;
const int MAXN = 201000; const int MAXQ = 500010;//查询数的最大值 									   //并查集部分 
int F[MAXN];
//需要初始化为-1 
int find(int x) { if (F[x] == -1)return x;  return F[x] = find(F[x]); }
void bing(int u, int v) { int t1 = find(u);  int t2 = find(v);  if (t1 != t2)   F[t1] = t2; } //************************ 
bool vis[MAXN];//访问标记 
int ancestor[MAXN];//祖先 
struct Edge { int to, next; }edge[MAXN * 2];
int head[MAXN], tot, cnt;
void addedge(int u, int v) { edge[tot].to = v;  edge[tot].next = head[u];  head[u] = tot++; }
struct Query
{
	int q, next;
	int index;//查询编号 
}query[MAXQ * 2];
int answer[MAXQ];//存储最后的查询结果，下标0~Q-1 
int h[MAXQ];
int tt;
int Q;
void add_query(int u, int v, int index)
{
	query[tt].q = v;
	query[tt].next = h[u];
	query[tt].index = index;
	h[u] = tt++;
	query[tt].q = u;
	query[tt].next = h[v];
	query[tt].index = index;
	h[v] = tt++;
}

void init()
{
	cnt = 1;
	tot = 0;
	memset(head, -1, sizeof(head));
	tt = 0;
	memset(h, -1, sizeof(h));
	memset(vis, false, sizeof(vis));
	memset(F, -1, sizeof(F));
	memset(ancestor, 0, sizeof(ancestor));
	memset(answer, -1, sizeof(answer));
}

void LCA(int u)
{
	ancestor[u] = u;
	vis[u] = true;
	for (int i = head[u]; i != -1; i = edge[i].next)
	{
		int v = edge[i].to;
		if (vis[v])continue;
		LCA(v);
		bing(u, v);
		ancestor[find(u)] = u;
	}
	for (int i = h[u]; i != -1; i = query[i].next)
	{
		int v = query[i].q;
		if (vis[v])
		{
			answer[query[i].index] = ancestor[find(v)];
		}
	}
}

bool flag[MAXN];
int Count_num[MAXN];
map<string, int>ans;
string an[MAXN], fa[MAXN], son[MAXN], f, s;
int main()
{
	int n;
	int u, v;
	scanf("%d", &n);
	init();
	memset(flag, false, sizeof(flag));
	for (int i = 1; i <= n; i++)
	{
		cin >> f >> s;
		if (!ans[f])
		{
			ans[f] = cnt++;
			an[cnt - 1].assign(f);
		}
		if (!ans[s])
		{
			ans[s] = cnt++;
			an[cnt - 1].assign(s);
		}
		addedge(ans[f], ans[s]);
		addedge(ans[s], ans[f]);
		flag[ans[s]] = 1;
	}
	scanf("%d", &Q);
	for (int i = 0; i < Q; i++)
	{
		cin >> fa[i] >> son[i];
		u = ans[fa[i]], v = ans[son[i]];
		add_query(u, v, i);
	}
	for (int i = 1; i <= n; i++) { if (!flag[i]) { LCA(i); memset(vis, 0, sizeof(vis)); } }
	for (int i = 0; i < Q; i++)
		if (fa[i] == son[i])cout << fa[i] << "\n";
		else if (answer[i] != -1)cout << an[answer[i]] << "\n";
		else cout << answer[i] << "\n";
		return 0;
}